import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class LevelOrderTraversal {
    public static void main(String args[]) {
        TreeNode node = new TreeNode(3);
        node.left = new TreeNode(9);
        node.right = new TreeNode(20);
        node.right.left = new TreeNode(15);
        node.right.right = new TreeNode(7);
        List<List<Integer>> result = levelOrderTraversal(node);
        System.out.println("Node Order:" + result);
    }

    private static List<List<Integer>> levelOrderTraversal(TreeNode node) {
        Queue<TreeNode> queue = new LinkedList<>();
        List<List<Integer>> result = new ArrayList<>();
        if (node == null) return result;
        queue.offer(node);
        while (!queue.isEmpty()) {
            List<Integer> level = new ArrayList<>();
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                TreeNode node1 = queue.poll();
                level.add(node1.val);
                if (node1.left != null)
                    queue.offer(node1.left);
                if (node1.right != null) {
                    queue.offer((node1.right));
                }
            }
            result.add(level);
        }
        //result.add(levelOrderTraversal());

        return result;
    }
}
